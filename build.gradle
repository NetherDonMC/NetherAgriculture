plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.gradleup.shadow' version '8.3.6' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

def secret_props = new Properties()
def secret_props_file = file("secret.properties")
if (secret_props_file.exists()) {
    secret_props_file.withReader("UTF-8") {
        secret_props.load(it)
    }
}

ext {
    replace_properties = [
        name        : rootProject.mod_name,
        id          : rootProject.mod_id,
        version     : rootProject.mod_version,
        author      : rootProject.mod_author,
        license     : rootProject.mod_license,
        description : rootProject.mod_description
    ]
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

publishMods {
    version = "${mod_version}"
    type = "${mod_version}".toLowerCase().contains("beta") ? BETA : STABLE;
    changelog = file("LATEST_CHANGELOG.md").text

    def displayNamePrefix = "${mod_name} - ${minecraft_version} - ${mod_version} - ";

    def cfOpt = curseforgeOptions {
        accessToken = secret_props['curseforge_token']
        projectId = "504384"
        minecraftVersions.add("${minecraft_version}")
        changelogType = "markdown"
        clientRequired = true
        serverRequired = true
    }

    def mrOpt = modrinthOptions {
        accessToken = secret_props['modrinth_token']
        projectId = "8M5tPih9"
        minecraftVersions.add("${minecraft_version}")
    }

    def initNeoForge = { me.modmuss50.mpp.Platform platform ->
        platform.file project(":neoforge")
        platform.modLoaders.add("neoforge")
        platform.displayName = displayNamePrefix + "NeoForge"
    }

    def initFabric = { me.modmuss50.mpp.Platform platform ->
        platform.file project(":fabric")
        platform.modLoaders.add("fabric")
        platform.displayName = displayNamePrefix + "Fabric"
    }

    curseforge("cfNeo") {
        from cfOpt
        initNeoForge it
        optional("cloth-config")
    }

    curseforge("cfFabric") {
        from cfOpt
        initFabric it
        optional("cloth-config")
        requires("forge-config-api-port-fabric")
    }

    modrinth("mrNeo") {
        from mrOpt
        initNeoForge it
        optional("cloth-config")
    }

    modrinth("mrFabric") {
        from mrOpt
        initFabric it
        optional("cloth-config")
        requires("forge-config-api-port")
    }
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        archivesName = "${mod_name}".replaceAll("\\s", "") + "-$project.name-${minecraft_version}"
    }

    jar {
        exclude("${mod_id}.accesswidener")
    }

    repositories {

    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "net.minecraft:minecraft:${minecraft_version}"
        mappings loom.officialMojangMappings()
    }

    processResources {
        inputs.properties replace_properties
    }

    java {
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        repositories {

        }
    }
}
