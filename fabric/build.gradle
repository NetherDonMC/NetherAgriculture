plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = file("src/main/resources/${mod_id}.fabric.accesswidener")
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        url = "https://mvn.devos.one/releases/"
    }
    maven {
        url = "https://mvn.devos.one/snapshots/"
    }
    maven {
        url = "https://repo.greenhouse.house/snapshots/"
    }
    maven {
        url = "https://jitpack.io"
    }
    maven {
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
    maven {
        url = "https://maven.terraformersmc.com/"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    include(modImplementation("com.github.Chocohead:Fabric-ASM:${fabric_asm_version}")) {
        exclude (group: "net.fabricmc.fabric-api")
    }

    modApi "com.terraformersmc:modmenu:${mod_menu_version}"
    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forge_config_api_version}"
}

processResources {
    filesMatching('fabric.mod.json') {
        expand rootProject.replace_properties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
